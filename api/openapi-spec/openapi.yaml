openapi: 3.0.3
info:
  title: Auth Service
  description: |-
    This service acts as a bridge between an OpenID Connect identity provider and the rest of the registration system backend.
    
    It provides redirect endpoints to log in and out, which set/update or clear a cookie, accordingly.
    
    Unlike all other services in the registration system backend, these endpoints are for the user's browser, not REST APIs.
    
    Whenever you get a 401 response for any of the other registration system endpoints, you send the user's browser to
    the auth endpoint, setting an appropriate return url. When the user comes back, they'll have logged in
    and you will no longer get 401. 
    
    ... until the token expires again, or the user terminates the session in another window
    (which can also be done in the IDP via "terminate all sessions"). Or until you redirect them to the logout endpoint.

    **IMPORTANT TO UNDERSTAND:** You do not EVER call this service on behalf of the user.
    
    You SEND their browser here via a redirect. They get
    redirected on to the identity provider, possibly type in their password (or click some confirm dialog, or have
    their expired token renewed, get asked for an SMS code, etc. etc.). Then they come back via redirect to you,
    now having a secure http-only cookie, which the other services in the registration system can check.
    
    You as the frontend do not even get to see the token. You won't need it.

    **ALSO IMPORTANT:** It is bad for security to use this in an iframe. So don't!

    In terms of the OpenID Connect standard, this service implements the "authentication code flow" with PKCE.
  license:
    name: MIT
    url: https://github.com/eurofurence/reg-attendee-service/blob/main/LICENSE
  version: 0.1.0
servers:
  - url: /
    description: localhost
  - url: /authsrv
    description: server
tags:
  - name: login
    description: Log in or renew token in cookie
  - name: logout
    description: Clear cookie and terminate session with IDP
  - name: idp
    description: Convenience endpoints to obtain information about the logged in user, or to centralize idp configuration
  - name: info
    description: Health and other public status information
paths:
  /v1/auth:
    get:
      tags:
        - login
      summary: Begin the log in flow
      description: |-
        The /auth endpoint begins an OpenID Connect authentication code flow. Some (potentially unknown)
        website or application has realized that an unauthenticated user tried to access their service,
        and now the user is being directed to the /auth endpoint so they can log in.

        The config file contains a list of valid application configurations that this service can perform
        authentication flows for. For each application configuration, a client_id, a client_secret, a
        pattern for valid redirect_urls, a list of scopes and so on are configured. (see example config file)

        Any additional query parameters not specified here are appended to the app's dropoff_url after a successful
        authentication.
        
        IMPORTANT: all responses are text/html. You do not call this for the user, you SEND the user here via a redirect!
        It is also not good security practice to use this in an iframe!
      operationId: loginBeginFlow
      parameters:
        - name: app_name
          in: query
          description: |-
            The name of the application that the user wants to be authenticated for. 
            
            Must be present as a key in the configuration file of this service under application_configs.
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z-]*[a-z]$'
          example: registration-system
        - name: dropoff_url
          in: query
          description: |-
            Where to redirect the user after a successfull authentication flow. Use this to bring the user back
            to their current position in your application.
            
            This URL must match the pattern of allowed URLs in the config file.
          required: true
          schema:
            type: string
            format: uri
          example: https://example.com/app/some/deep/link/123453487623647
      responses:
        '302':
          description: Successfully prepared the authentication code flow.
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL of the identity provider (authorization_endpoint)
        '400':
          description: Syntactically invalid parameter values or app_name missing
        '403':
          description: forbidden dropoff_url (does not match pattern)
        '404':
          description: app_name not found in configuration
        '500':
          description: An unexpected error occurred
  /v1/dropoff:
    get:
      tags:
        - login
      summary: End the log in flow
      description: |-
        The /dropoff endpoint is part of the OpenID Connect authorization code flow. Once the OpenID
        Connect provider agrees to provide an access token it redirects the user agent to this
        endpoint. Here, the reg-auth-service obtains the access token from the OIDC provider,
        stores it in a cookie, and then redirects the user agent once more to the URL the
        user agent initially intended to visit. (the dropoff url)

        IMPORTANT: all responses are text/html. You do not ever call this! Also, you don't send the user here, 
        the identity provider does that after the user has typed in their password (or the token has been renewed)!
      operationId: loginEndFlow
      parameters:
        - name: state
          in: query
          description: random-string identifier of this flow
          required: true
          schema:
            type: string
        - name: code
          in: query
          description: temporary credential to obtain the access token from the OIDC provider
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Successfully finished the authentication code flow.
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: the dropoff URL you provided when sending the user's browser to /v1/auth
        '400':
          description: Bad request (usually state or code parameter missing)
        '404':
          description: state value not found in in-memory store, or timed out
        '500':
          description: An unexpected error occurred
  /v1/logout:
    get:
      tags:
        - logout
      summary: Log Out from Regsys (but not from IDP)
      description: |-
        The /logout endpoint deletes the cookie and redirects back to the app's default dropoff url.

        IMPORTANT: all responses are text/html. You do not call this for the user, you SEND the user here via a redirect!
        It is also not good security practice to use this in an iframe!
      operationId: loginEndFlow
      parameters:
        - name: app_name
          in: query
          description: |-
            The name of the application that the user should be logged out of. 
            
            Must be present as a key in the configuration file of this service under application_configs.
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z-]*[a-z]$'
          example: registration-system
      responses:
        '302':
          description: Successfully logged out.
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: the default dropoff URL configured for this app_name.
        '400':
          description: Bad request (usually app_name parameter missing)
        '404':
          description: app_name not found in configuration
        '500':
          description: An unexpected error occurred
  /v1/userinfo:
    get:
      tags:
        - idp
      summary: Get relevant information about the logged in user
      description: |-
        Returns information about the logged in user: their assigned relevant roles, and their email address,
        validating this with the identity provider.
        
        The user is determined from the cookies set by /v1/dropoff. This endpoint allows us to
        use a http only secure cookie, and only exposes user information actually needed by the registration 
        system.
        
        First, The token is locally validated, both signature and expiry are checked.
        
        Then the OIDC userinfo endpoint is queried, and the response is
        compared to the locally determined values. There is a short (configurable) caching period
        to avoid bombarding the identity provider with identical requests. By default, the caching
        period is set to 30 seconds.
        
        **Frontend:** you should use /v1/frontend-userinfo instead, which is completely local and thus really fast and
        computationally extremely cheap.
        
        **Backend:** use this endpoint to ensure you really have a valid user token,
        not a forgery or one with outdated role claims (such as revoked permissions) whenever the tradeoff between
        speed and security falls on the side of making this additional online check.

        Two examples:
        
        - creating new registrations is performance critical and does not expose user data, since the person
          making the registration is _sending_ the data to us &rightarrow; don't call this
        
        - reading existing registrations, or any admin requests, can expose user data and is not very performance
          critical &rightarrow; should call this before processing the request
      operationId: getUserInfo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: |-
            Authorization required - either no cookie present or the token is expired or invalid.
            
            If an OIDC userinfo endpoint is configured, this may also mean the IDP did not recognize the token
            (meaning it could be a forgery), or the role assignments differ (meaning the information in the token
            is outdated, such as someone's admin rights were revoked).
            
            If you receive this response in the frontend, you should immediately redirect the user to the 
            /v1/auth endpoint, so they can get a fresh (current) token.
            
            If you receive this response in the backend, you should NOT proceed and instead return 401 yourself.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: A userinfo endpoint is configured, but the identity provider failed to respond.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/frontend-userinfo:
    get:
      tags:
        - idp
      summary: Get relevant information about the logged in user (fast version)
      description: |-
        Returns information about the logged in user: their assigned relevant roles, and their email address,
        but does NOT validate this with the identity provider, instead relying on local token parsing only.
        
        The user is determined from the cookies set by /v1/dropoff. This endpoint allows us to
        use a http only secure cookie, and only exposes user information actually needed by the registration 
        system.
        
        The token is locally validated ONLY, both signature and expiry are checked. This is enough for the
        frontend, because the backend needs to check it again anyway.
        
        **Frontend:** use this (computationally cheap) endpoint to determine information about the logged in user, 
        like prefilling their email address, or determining whether to show navigation to the admin frontend.
        If you get a 401, redirect the user to /v1/auth.
        
        **Backend:** you should use /v1/userinfo for safety reasons.

      operationId: getUserInfoFrontend
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: |-
            Authorization required - either no cookie present or the token is expired or invalid.
            
            If you receive this response in the frontend, you should immediately redirect the user to the 
            /v1/auth endpoint, so they can get a fresh (current) token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: A userinfo endpoint is configured, but the identity provider failed to respond.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /:
    get:
      tags:
        - info
      summary: Health
      description: Health
      responses:
        '200':
          description: Healthy.
components:
  schemas:
    Error:
      type: object
      required:
        - message
        - timestamp
        - requestid
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred.
          example: 2006-01-02T15:04:05+07:00
        requestid:
          type: string
          description: |-
            An internal trace id assigned to the error. Used to find logs associated with errors across our services. 
            Display to the user as something to communicate to us with inquiries about the error.
          example: a8b7c6d5
        message:
          type: string
          description: |-
            A keyed description of the error. We do not write human readable text here because the user interface will be multi language.
            
            At this time, there are these values:
            - auth.unauthorized (token missing completely or invalid, expired, or revoked in identity provider)
            - auth.idp.error (the identity provider failed to respond to a request made by this service)
          example: auth.unauthorized
        details:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Optional additional details about the error. If available, will usually contain English language technobabble.
          example:
            email:
              - email address does not match the regular expression
              - email address cannot be empty
            other:
              - you need to refill the flux capacitor before the operation can succeed
    UserInfo:
      type: object
      required:
        - subject
        - email
        - email_verified
        - groups
      properties:
        subject:
          type: string
          description: The internal user id of the identity provider (aka the "subject").
          example: Y6W7R2K9
        name:
          type: string
          description: The name entered by the user. May be missing.
          example: Jumpy
        email:
          type: string
          format: email
          description: The email address of the user.
          example: me@example.com
        email_verified:
          type: boolean
          description: Has the email address been verified by the identity provider?
        groups:
          type: array
          items:
            type: string
            example: admin
          description: |-
            The relevant groups the user is assigned in the identity provider.
            
            Filtered against a list in the configuration of this service to ensure only relevant information is returned.
            
            Note that the IDP sends group IDs, not names.
